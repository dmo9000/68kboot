We have a problem. 

The bootloader will only load 32767 bytes.
Our shim binary is now 31956 bytes long, only leaving 811 bytes for 
an ELF loader. In addition, I'd like to implement more BDOS functions. 

It's simply too big. There are a few other possible strategies: 

1) implement an executable compressor/decompressor

		gzip -9 gets it down to 13078 
		bzip2 -9 does worse, only 13367
		lzf is even worse, 16455, but it might make up for it in decompressor size
		lz4 -9 is ok, 15961, but the decoder might be able to be just a few bytes in 68K assembly

	unfortunately, this a losing battle. It's only going to save us so much on its own. 

2)	create a new bootloader which loads shim at a higher address (0x8400 seems to be the minimum base address) 
		if you allow 32K for a bootloader. 

3) Move the shim shell to a secondary binary, leaving the BDOS interface in the first binary?
   Will probably shrink things a lot, but again there is the problem with #1 above as the BDOS grows. 

4) apply general reduction strategies to the binaries. May be hard to find more compiler optimizations ...
--

Fletcher-16:

    https://en.wikipedia.org/wiki/Fletcher%27s_checksum

CRC32:
    
    https://stackoverflow.com/questions/122982/robust-and-fast-checksum-algorithm

-- 
LZ4 optimized for ARM Cortex ASM

https://community.arm.com/processors/b/blog/posts/lz4-decompression-routine-for-cortex-m0-and-later

Atari ST?
--
http://www.atari-forum.com/viewtopic.php?t=26825
